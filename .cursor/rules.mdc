---
description: 
globs: 
alwaysApply: true
---
# Finance-API 项目 · Cursor Rules

> 适用范围：finance-api/**
> 版本：v0.1.0 （同步 2025-06-02 规范）
> 目标：确保所有 AI 生成 / 修改的代码 **100 % 符合\*\* 本项目结构、风格与约定。

---

## ⚠️ Python 环境（重要！）

**🔴 强制要求：本项目使用虚拟环境，所有 Python 相关命令必须使用虚拟环境中的可执行文件！**

- **Python 执行**：`./venv/bin/python` （绝不使用 `python` 或 `python3`）
- **包安装**：`./venv/bin/pip install` （绝不使用 `pip` 或 `pip3`）
- **测试运行**：`./venv/bin/pytest` （绝不使用 `pytest`）
- **其他工具**：一律使用 `./venv/bin/<tool_name>`

**❌ 禁止行为**：

- 使用系统级 `python`、`pip`、`pytest` 等命令
- 忽略虚拟环境而直接运行全局命令

**✅ 正确示例**：

```bash
./venv/bin/pip install fastapi
./venv/bin/python app/main.py
./venv/bin/pytest tests/
```

---

## 0. 通用原则

1. **最小改动**：优先修改而非重写；除非新建文件更合理。
2. **单一责任**：一次 PR / Commit 仅完成一个清晰目标（新端点、bugfix 等）。
3. **TDD 优先**：若添加逻辑，**必须** 同步编写 / 更新 `tests/`。
4. **依赖稳健**：新增依赖需写入 `requirements.txt` 并说明用途。
5. **可回滚**：任何破坏性变更需保证向后兼容或提供迁移脚本。
6. **接口一致性**：无论使用主数据源还是降级数据源，用户调用 API 时的输入参数和返回结果格式必须完全一致。

---

## 1. 目录与文件约束

| 操作                   | 规则                                                                   |
| ---------------------- | ---------------------------------------------------------------------- |
| 新增 **路由**          | 放入 `app/api/v1/{domain}.py`；文件名使用 **snake_case**，与业务域一致 |
| 新增 **业务逻辑**      | 放入 `app/services/{module}_service.py`；禁止在路由层直接调 yfinance   |
| 新增 **Pydantic 模型** | 放入 `app/models/{domain}.py`；导出 `__all__`                          |
| 共享 **工具 / 装饰器** | 放入 `app/utils/`；不得引用 FastAPI 实例                               |
| 测试文件               | 与被测模块同名，置于 `tests/`，文件名 `test_<module>.py`               |

> ⚠️ 禁止向根目录写入业务代码；仅允许运行脚本或配置文件。

---

## 2. 模块开发流程

1. **写模型**：在 `app/models/` 定义 Request / Response。
2. **写 Service**：在 `app/services/` 调用 `yfinance` 并做数据整形、缓存。
3. **写 Router**：在 `app/api/v1/` 中引入模型 & service；暴露端点。
4. **写测试**：使用 `pytest-asyncio` + `httpx.AsyncClient`。
5. **更新 docs**：如端点变化，更新 `README.md` 或 `openapi` 描述。

---

## 3. FastAPI 约定

- **基础路径**：所有路由 `prefix="/api/v1"`，并加 `tags=["<Domain>"]`。
- **返回格式**：统一 `{"symbol": str, "data": Any, "timestamp": ISO8601}`。
- **异常**：
  - 捕获 `ValueError` ➜ `HTTPException 400` / `INVALID_PARAM`。
  - 捕获 `yfinance` 相关异常 ➜ `HTTPException 502` / `YAHOO_API_ERROR`。
  - 其他 ➜ `HTTPException 503` / `SERVICE_UNAVAILABLE` 并写日志。
- **依赖注入**：复杂参数解析请使用 `Depends`；避免在 handler 内写长逻辑。

---

## 4. yfinance 调用规范

- 统一通过 `app/services/yfinance_service.py` 暴露的 Helper，**禁止** 直接 `yf.Ticker`。
- Service 必须：
  1. **大小写**：`symbol = symbol.upper()`；
  2. **缓存**：高频方法加 `@cached(ttl=<配置或 60s>)`；
  3. **线程池**：使用 `run_in_threadpool` 包裹阻塞调用。
- 返回值需符合 **端点总览** 中定义的字段 / 形状。

---

## 5. 代码风格 & 质量

- **格式化**：黑格式 `black` + `isort` + `ruff`；CI 自动检查。
- **类型标注**：Python >= 3.12 全量 `typing`.
- **Docstring**：Google-Style；Service 与公共函数需示例。
- **日志**：统一 `core/logging.py`，使用结构化日志（JSON）。
- **魔数**：禁止；提取为常量或配置。
- **性能**：单请求可接受阻塞 ≤ 100 ms；必要时异步优化或批量查询。

---

## 6. 缓存策略

| 场景             | 方法 / 装饰器              | 默认 TTL |
| ---------------- | -------------------------- | -------- |
| `fast_info` 快照 | `@cached_fast(ttl=15)`     | 15s      |
| 历史行情 / 财报  | `@cached_medium(ttl=3600)` | 1h       |
| 静态元数据       | `@cached_long(ttl=86400)`  | 24h      |

---

## 7. 测试准则

- 覆盖率目标 ≥ 85 %。
- Service 层对 yfinance 使用 **mock**；Router 层做 e2e。
- 必须断言：HTTP Status、Schema、关键字段值范围。
- 新增端点未达覆盖率，自动拒绝 PR 合入。

---

## 8. 自动修正规则

- 若 AI 生成代码 **违反本文件任一条**，应立即自我更正，或提出修正方案并等待人工确认。
- 若需新建规则，请在本文件开 PR，并在标题标注 `[RULE]`。

---

## 9. 禁止事项

1. **🔴 使用系统级 Python 命令**：禁止使用 `python`、`pip`、`pytest` 等全局命令，必须使用 `./venv/bin/` 路径下的可执行文件。
2. 在 Router 层直接 `yf.Ticker(...)`。
3. 在任意层写入硬编码 API Key、密码、绝对路径。
4. 修改 `core/config.py` 以外的方式读取环境变量。
5. 将大型 DataFrame 序列化为字符串直接返回（应转 `dict` 或分页）。
6. 引入未在 `requirements.txt` 声明的第三方库。

---

> **遵循本规则，让 AI 与人类协作高效而可控。** 若规则与业务需求冲突，请先更新本文件，再开始编码。
